#!/usr/bin/env bash
# ^ Note the above "shebang" line. This says "This is an executable shell script"
# Name this script "pre-commit" and place it in the ".git/hooks/" directory


##====================================================================================##
# If any command fails, exit immediately with that command's exit status
set -euo pipefail
##====================================================================================##


##====================================================================================##
## ANSI Color Codes for use with echo command
## in order to ensure robustness we've just placed these in the hook itself
##                                                     (rather than source another file)
## Just comment in/out as needed if you decide to edit
# BLACK='\033[0;30m'
# RED='\033[0;31m'
GREEN='\033[0;32m'
# BROWN='\033[0;33m'
# BLUE='\033[0;34m'
# PURPLE='\033[0;35m'
# CYAN='\033[0;36m'
# LIGHT_GRAY='\033[0;37m'
DARK_GRAY='\033[1;30m'
# LIGHT_RED='\033[1;31m'
LIGHT_GREEN='\033[1;32m'
YELLOW='\033[1;33m'
# LIGHT_BLUE='\033[1;34m'
# LIGHT_PURPLE='\033[1;35m'
# LIGHT_CYAN='\033[1;36m'
# WHITE='\033[1;37m'
NC='\033[0m' # No Color
##====================================================================================##


##====================================================================================##
# MANUALLY add package name here
package_name=
##====================================================================================##


##====================================================================================##
echo -e "${DARK_GRAY}==============${YELLOW}Beginning of Pre-Commit Hook Script${DARK_GRAY}===============${NC}"

# Run black against all code in the `source_code` directory
echo -e "${DARK_GRAY}================================================================${NC}"
echo -e "${YELLOW}running Black...${NC}"
echo
black SRC --check
echo
echo -e "${GREEN}Black formatting check passed!${NC}"
echo -e "${DARK_GRAY}================================================================${NC}"

# Run Pylint against all code in the `source_code` directory
echo -e "${DARK_GRAY}================================================================${NC}"
echo -e "${YELLOW}running Pylint...${NC}"
echo
pylint src
echo
echo -e "${GREEN}Pylint 'scent' checks passed!${NC}"
echo -e "${DARK_GRAY}================================================================${NC}"

# Run Pyright for errors against all code in the `source_code` directory
echo -e "${DARK_GRAY}================================================================${NC}"
echo -e "${YELLOW}running Pyright for Errors...${NC}"
echo
pyright
echo
echo -e "${GREEN}Pyright Error check passed!${NC}"
echo -e "${DARK_GRAY}================================================================${NC}"

# Run Pyright for completness against all code in the `source_code` directory
echo -e "${DARK_GRAY}================================================================${NC}"
echo -e "${YELLOW}running Pyright for Completeness...${NC}"
echo
pyright --verifytypes $package_name
# NOTE: not sure how to get it to use current package automatically
echo
echo -e "${GREEN}Pyright Completeness analysis complete.${NC}"
echo -e "${LIGHT_GREEN}(See above for results)${NC}"
echo -e "${DARK_GRAY}================================================================${NC}"

# Run Pytest against all code in the `source_code` directory
echo -e "${DARK_GRAY}================================================================${NC}"
echo -e "${YELLOW}running Pytest...${NC}"
echo
pytest
echo
echo -e "${GREEN}Pytest passed!${NC}"
echo -e "${DARK_GRAY}================================================================${NC}"

# Run Coverage (pytest-extension)
echo -e "${DARK_GRAY}================================================================${NC}"
echo -e "${YELLOW}running Coverage (pytest-cov)...${NC}"
echo
coverage report --show-missing --fail-under=100
echo
echo -e "${GREEN}Coverage passed!${NC}"
echo -e "${DARK_GRAY}================================================================${NC}"

# Check that Poetry state doesn't detect any errors (NOTE: non-exhaustive)
echo -e "${DARK_GRAY}================================================================${NC}"
echo -e "${YELLOW}running Poetry-Check...${NC}"
echo
poetry check
echo
echo -e "${GREEN}Poetry-Check passed!${NC}"
echo -e "${DARK_GRAY}================================================================${NC}"

# Generate fresh docs with pdoc
echo -e "${DARK_GRAY}================================================================${NC}"
echo -e "${YELLOW}running Pdoc...${NC}"
echo
pdoc $package_name tests --output-directory=docs/
echo
echo -e "${GREEN}Pdoc docs generated!${NC}"
echo -e "${DARK_GRAY}================================================================${NC}"


echo -e "${DARK_GRAY}=================${LIGHT_GREEN}End of Pre-Commit Hook Script${DARK_GRAY}==================${NC}"
##====================================================================================##
# END OF SCRIPT
